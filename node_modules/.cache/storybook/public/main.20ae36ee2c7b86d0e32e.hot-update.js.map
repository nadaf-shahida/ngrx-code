{"version":3,"file":"main.20ae36ee2c7b86d0e32e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AAEA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AA7BA;AALA;AACA;AACA;AACA;AACA;AAGA;AAFA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACdA;AAEA;AACA;AACA;AAKA;AAQA;AAAA;AAPA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAtBA;AAHA;AACA;AACA;AASA;AARA;AAAA;;;;;;;;;;;;;;;;;ACTA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAnBA;AAHA;AACA;AACA;;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAtDA;AAHA;AACA;AACA;AAOA;AANA;AAAA;;;;;;;;;;;;;;;;;;;;ACVA;AAGA;AAKA;AAKA;AAKA;AAKA;AAEA","sources":["webpack://NGRX-Course/./src/app/modules/auth/login/login.component.html","webpack://NGRX-Course/./src/stories/card.stories.ts","webpack://NGRX-Course/./src/app/modules/auth/login/login.component.ts","webpack://NGRX-Course/./src/app/modules/auth/resources/auth.service.ts","webpack://NGRX-Course/./src/app/modules/cart/resources/helper-shopping.service.ts","webpack://NGRX-Course/./src/app/modules/cart/resources/mock-api-cart.service.ts","webpack://NGRX-Course/./src/app/store/actions/auth.actions.ts"],"sourcesContent":["export default \"<div class=\\\"row\\\">\\n\\t<div class=\\\"container\\\">\\n\\t\\t<h1>Login</h1>\\n\\t\\t<form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(f)\\\">\\n\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t<label for=\\\"usernamelogin\\\">\\n\\t\\t\\t\\tUsername</label>\\n\\t\\t\\t\\t<input type=\\\"text\\\" \\n\\t\\t\\t\\tname=\\\"username\\\" \\n\\t\\t\\t\\tngModel \\n\\t\\t\\t\\t#username required id=\\\"usernamelogin\\\"\\n\\t\\t\\t\\tclass=\\\"inputdetails\\\"\\n\\t\\t\\t\\t placeholder=\\\"user or admin\\\">\\n\\t\\t\\t</div>\\n\\t\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t\\t<label for=\\\"passwordlogin\\\">\\n\\t\\t\\t\\tPassword</label>\\n\\t\\t\\t\\t<input type=\\\"password\\\" name=\\\"password\\\"\\n\\t\\t\\t\\t ngModel #password required \\n\\t\\t\\t\\t id=\\\"passwordlogin\\\" \\n\\t\\t\\t\\t class=\\\"inputdetails\\\"\\n\\t\\t\\t\\t  placeholder=\\\"Password\\\"\\n\\t\\t\\t\\t\\t   autocomplete>\\n\\t\\t\\t</div>\\n\\t\\t\\t\\n\\t\\t\\t<div class=\\\"allbtn\\\">\\n\\t\\t\\t\\t<button type=\\\"submit\\\" [disabled]=f.invalid class=\\\"btn\\\"><span>Login <i class=\\\"fas fa-sign-in-alt\\\"></i></span></button>\\n          </div>\\n\\t\\t\\n\\t\\t</form>\\n\\n\\t</div>\\n</div>\";","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { CommonModule } from \\\"@angular/common\\\";\\r\\nimport { action } from \\\"@storybook/addon-actions\\\";\\r\\nimport { moduleMetadata, Story, Meta } from \\\"@storybook/angular\\\";\\r\\nimport { LoginComponent } from \\\"src/app/modules/auth/login/login.component\\\";\\r\\nimport { cardComponent } from \\\"./card.component\\\";\\r\\n\\r\\n\\r\\nexport default{\\r\\n    component: LoginComponent,\\r\\n    decorators:[\\r\\n        moduleMetadata({\\r\\n            declarations: [cardComponent],\\r\\n            imports: [ CommonModule]\\r\\n        }),\\r\\n    ],\\r\\n    excludeStories: /.*Data$/,\\r\\n    title: 'Card',\\r\\n}\\r\\n\\r\\nexport const actionData = {\\r\\n    onTitleChange: action('onTitleChange'),\\r\\n    onColorChange: action('onColorChange')\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nconst Template: Story<cardComponent> = orgs=>({\\r\\n    props:{\\r\\n        onTitleChange: actionData.onColorChange,\\r\\n        onColorChange: actionData.onColorChange,\\r\\n    },\\r\\n    \\r\\n});\\r\\n\\r\\nexport const Default1 = Template.bind({});\\r\\n\\r\\n\\r\\nDefault1.args = {\\r\\n    card:{\\r\\n        id:\\\"1\\\",\\r\\n        Name:\\\"Login\\\",\\r\\n        state:\\\"Default Color\\\"\\r\\n    }\\r\\n}\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default1\":{\"startLoc\":{\"col\":39,\"line\":27},\"endLoc\":{\"col\":2,\"line\":33},\"startBody\":{\"col\":39,\"line\":27},\"endBody\":{\"col\":2,\"line\":33}}};\n    \nimport { CommonModule } from \"@angular/common\";\r\nimport { action } from \"@storybook/addon-actions\";\r\nimport { moduleMetadata, Story, Meta } from \"@storybook/angular\";\r\nimport { LoginComponent } from \"src/app/modules/auth/login/login.component\";\r\nimport { cardComponent } from \"./card.component\";\r\n\r\n\r\nexport default{\r\n    component: LoginComponent,\r\n    decorators:[\r\n        moduleMetadata({\r\n            declarations: [cardComponent],\r\n            imports: [ CommonModule]\r\n        }),\r\n    ],\r\n    excludeStories: /.*Data$/,\r\n    title: 'Card',\r\n}\r\n\r\nexport const actionData = {\r\n    onTitleChange: action('onTitleChange'),\r\n    onColorChange: action('onColorChange')\r\n}\r\n\r\n\r\n\r\nconst Template: Story<cardComponent> = orgs=>({\r\n    props:{\r\n        onTitleChange: actionData.onColorChange,\r\n        onColorChange: actionData.onColorChange,\r\n    },\r\n    \r\n});\r\n\r\nexport const Default1 = Template.bind({});\r\n\r\n\r\nDefault1.args = {\r\n    card:{\r\n        id:\"1\",\r\n        Name:\"Login\",\r\n        state:\"Default Color\"\r\n    }\r\n}\n\n\nDefault1.parameters = { storySource: { source: \"orgs=>({\\r\\n    props:{\\r\\n        onTitleChange: actionData.onColorChange,\\r\\n        onColorChange: actionData.onColorChange,\\r\\n    },\\r\\n    \\r\\n})\" }, ...Default1.parameters };","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../resources/auth.service';\nimport { NgForm } from '@angular/forms';\nimport { MockApiCartService } from '../../cart/resources/mock-api-cart.service';\nimport { User } from '../resources/auth';\nimport * as fromAuthActions from 'src/app/store/actions/auth.actions';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/store';\n\n@Component({\n  selector: 'app-login',\n  template: (require('./login.component.html').default || require('./login.component.html')).length ? (require('./login.component.html').default || require('./login.component.html')) : '',\n  styles: [(require('./login.component.scss').default || require('./login.component.scss')).length ? (require('./login.component.scss').default || require('./login.component.scss')) : ''],\n})\nexport class LoginComponent implements OnInit {\n  constructor(\n    private authService: AuthService,\n    private cartService: MockApiCartService,\n    private store: Store<AppState>\n  ) {}\n\n  ngOnInit(): void {}\n\n  user: User;\n\n  updateShoppingCart(userid) {\n    const observer = {\n      next: (cartlist) => {\n        this.cartService.updatedCartSelection(cartlist);\n      },\n      error: (err) => console.error(err),\n    };\n    this.cartService.getCartByUserId(userid).subscribe(observer);\n  }\n\n  onSubmit(f: NgForm) {\n    this.store.dispatch(\n      fromAuthActions.loginPage({\n        username: f.value.username,\n        password: f.value.password,\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as fromAuthModels from './auth';\nimport { of, Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  /********************************************************************************** */\n  // This is a mock service, Don't use examples on this page in production code. Some APIs\n  //  might be totally fake, and Some business logic usually handled on the server\n  //   will be done on this page. This page is designed to give a back fake data.\n  /********************************************************************************** */\n  baseUrl: string = 'http://localhost:3000/users/';\n\n  constructor(private http: HttpClient) {}\n  //Fake Login API\n  login(username: string, password: string): Observable<any> {\n    return this.http.get(this.baseUrl + '?username=' + username).pipe(\n      switchMap((users) => {\n        let user = users[0];\n        if (user) {\n          return of(user);\n        } else {\n          return throwError('Unable to login');\n        }\n      })\n    );  \n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Product } from './cart';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HelperCartService {\n  constructor() {}\n\n  productsSubTotal(products: Product[]): number {\n    let total: number = 0;\n    for (let index = 0; index < products.length; index++) {\n      const element = products[index];\n      total = +element.price + total;\n    }\n    return parseFloat(total.toFixed(2));\n  }\n\n  productsTotalItems(products: Product[]): number {\n    return products ? products.length : 0;\n  }\n\n  isProductsEmpty(products: Product[]): boolean {\n    return products.length == 0 ? true : false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject, of, throwError } from 'rxjs';\nimport { Cart } from './cart';\nimport { tap, switchMap } from 'rxjs/operators';\nimport { HelperCartService } from './helper-shopping.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockApiCartService {\n  /********************************************************************************** */\n  // This is a mock service, Don't use examples on this page in production code. Some APIs\n  //  might be totally fake, and Some business logic usually handled on the server\n  //   will be done on this page. This page is designed to give a back fake data.\n  /********************************************************************************** */\n  constructor(private http: HttpClient, private helper: HelperCartService) {}\n\n  baseUrl: string = 'http://localhost:3000/carts/';\n\n  private cartSource = new BehaviorSubject<Cart>({\n    id: null,\n    userid: null,\n    products: [],\n    isCartEmpty: null,\n    cartItemsLength: null,\n    productsSubtotal: null,\n  });\n  cart = this.cartSource.asObservable();\n\n  getCartByUserId(userid: string): Observable<Cart> {\n    return this.http.get<Cart>(this.baseUrl + '?userid=' + userid).pipe(\n      switchMap((carts) => {\n        let cart: Cart = carts[0];\n        if (cart) {\n          cart.isCartEmpty = this.helper.isProductsEmpty(cart.products);\n          cart.cartItemsLength = this.helper.productsTotalItems(cart.products);\n          cart.productsSubtotal = this.helper.productsSubTotal(cart.products);\n          return of(cart);\n        } else {\n          return throwError('Unable to get shopping cart');\n        }\n      })\n    );\n  }\n\n  updateCart(id: string, cart: Cart): Observable<Cart> {\n    return this.http.put<Cart>(this.baseUrl + id, cart).pipe(\n      switchMap((cart) => {\n        if (cart) {\n          cart.isCartEmpty = this.helper.isProductsEmpty(cart.products);\n          cart.cartItemsLength = this.helper.productsTotalItems(cart.products);\n          cart.productsSubtotal = this.helper.productsSubTotal(cart.products);\n          return of(cart);\n        } else {\n          return throwError('Unable to update shopping cart');\n        }\n      })\n    );\n  }\n\n  updatedCartSelection(cart: Cart) {\n    this.cartSource.next(cart);\n  }\n}\n","import { createAction, props } from '@ngrx/store';\nimport { User } from 'src/app/modules/auth/resources/auth';\n\nexport const loginPage = createAction(\n  '[Login Component] Login User',\n  props<{ username: string; password: string }>()\n);\n\nexport const loginModal = createAction(\n  '[Login Modal Component] Login User',\n  props<{ username: string; password: string }>()\n);\n\nexport const loginSuccess = createAction(\n  '[Auth Effect] Login User Success',\n  props<{ user: User }>()\n);\n\nexport const loginFailure = createAction(\n  '[Auth Effect] Login User Failure',\n  props<{ error: any }>()\n);\n\nexport const logout = createAction('[Auth Links Component] Logout User');\n\nexport const browserReload = createAction(\n  '[Core Component] Browser Reload',\n  props<{ user: User }>()\n);\n"],"names":[],"sourceRoot":""}